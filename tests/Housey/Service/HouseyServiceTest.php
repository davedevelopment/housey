<?php
namespace Housey\Service;

/**
 * Test class for HouseyService.
 * Generated by PHPUnit on 2011-12-26 at 22:01:36.
 */
class HouseyServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var HouseyService
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->mockCache = $this->getMock("\\Housey\\Cache\\CacheInterface");
        $this->mockAltMapper = $this->getMock("\\Housey\\Mapper\\AlternativeMapperInterface");
        $this->mockExpMapper = $this->getMock("\\Housey\\Mapper\\ExperimentMapperInterface");
        $this->object = new HouseyService($this->mockExpMapper, $this->mockAltMapper, $this->mockCache);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetIdentityAutomaticallyCreatesIdentity()
    {
        $this->assertNotNull($this->object->getIdentity());
    }

    public function testSetIdentityOverridesAuto()
    {
        $id = $this->object->getIdentity();
        $this->object->setIdentity('12345');
        $this->assertEquals('12345', $this->object->getIdentity());
    }



    public function testParseAlternativesWithIntegerReturnsRange()
    {
        $actual = HouseyService::parseAlternatives(5);
        $this->assertEquals(array(1, 2, 3, 4, 5), $actual);
    }

    public function testParseAlternativesWithZeroIndexArray()
    {
        $actual = HouseyService::parseAlternatives(array(1, 2, 3));
        $this->assertEquals(array(1, 2, 3), $actual);
    }

    public function testParseAlternativesWithSpecificWeights()
    {
        $actual = HouseyService::parseAlternatives(array('double' => 2, 'single' => 1));
        $this->assertEquals(array('double', 'double', 'single'), $actual);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testParseAlternativesThrowsWhenPassedString()
    {
        HouseyService::parseAlternatives("stupid argument");  
    }

    /**
     * Couple of basic tests with mocks, acceptance test will provide most
     * coverage
     */
    public function testTestStartsExperiment()
    {
        $this->mockExpMapper->expects($this->atLeastOnce())
                            ->method('find')
                            ->will($this->returnValue(null));

        $this->mockExpMapper->expects($this->once())
                            ->method('insert');

        $this->mockAltMapper->expects($this->exactly(2))
                            ->method('insert');

        $this->mockAltMapper->expects($this->atLeastOnce())
                            ->method('getByExperimentTestName')
                            ->will($this->returnValue(json_decode('[{"content":1, "weight":1}, {"content":2, "weight":1}]')));

        $this->object->test('mytest', array(1,2));
    }

    public function testTestShortCircuits()
    {
        $this->mockCache->expects($this->once())
                        ->method('get')
                        ->with("Housey::Experiment::ShortCircuit::dave")
                        ->will($this->returnValue('dave123'));

        $this->assertEquals('dave123', $this->object->test('dave', array('dave123', '456')));
    }
}
